import TelegramBot from 'node-telegram-bot-api';
import schedule from 'node-schedule';
import values from './values.js';
import { createNewUserByChatId, findAllUser, findUserByChatId, updateUserByChatId } from './models/users.js';
import { sequelize } from './models/sequelize.js';

// –°—Ç–≤–æ—Ä—ñ—Ç—å –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(values.token, { polling: true });

const main = async () => {
    const models = {
        list:  [
            'users'
        ]
    };
    // DB
    const configTables = models.list;
    const dbInterface = sequelize.getQueryInterface();
    const checks = await Promise.all(configTables.map(configTable => {
        return dbInterface.tableExists(configTable);
    }));
    const result = checks.every(el => el === true);
    if (!result) {
        // eslint-disable-next-line no-console
        console.error(`üö© Failed to check DB tables, see config.models.list`);
        throw (`Some DB tables are missing`);
    }
}; 

main();

bot.setMyCommands([
    { command: "/start", description: "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" }
]);


// Admin Chat ID
const adminChatId = 123456789; // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à actual admin chat ID

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –±–æ—Ä–≥
const notifyUsers = async () => {
    const users = await findAllUser();
    users.forEach(user => {
        if (user.balance > 0) {
            const message = `${user.name} –∫–í—Ç –¥–µ–Ω—å:${user.dayDifference}, –∫–í—Ç –Ω—ñ—á:${user.nightDifference} ${user.balance} –≥—Ä–Ω. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω—É –ø—ñ—Å–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏`;
            bot.sendMessage(user.chatId, message);
        }
    });
};

// –§–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ –≤—Å—ñ—Ö –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('photo', (msg) => {
    if (msg.chat.id !== adminChatId) {
        bot.forwardMessage(adminChatId, msg.chat.id, msg.message_id)
            .catch(error => console.error('Error forwarding message:', error));
    }
});

bot.onText('/start', async (msg) => {

    const chatId = msg.chat.id;
    const firstName = msg.from?.first_name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';

    bot.sendMessage(chatId, `–ü—Ä–∏–≤—ñ—Ç, ${firstName}!`);

    const user = await findUserByChatId(chatId);

    user || createNewUserByChatId(chatId, firstName);    

    const message = 
        "üí° *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!* \n\n" +
        "–í —Ü—å–æ–º—É –±–æ—Ç—ñ –í–∏ –º–æ–∂–µ—Ç–µ:\n" +
        "‚úÖ –ü–æ–¥–∞—Ç–∏ *–ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞* üìä\n" +
        "‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ *–∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –ø—Ä–æ –æ–ø–ª–∞—Ç—É* üí≥\n" +
        "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ *—Å–≤—ñ–π –±–∞–ª–∞–Ω—Å* üí∞\n\n" +
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ ‚¨áÔ∏è";

    const keyboard = {
        reply_markup: {
            keyboard: [
                [{ text: "üìà –ü–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏" }, { text: "üí∞ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å" }]
            ],
            resize_keyboard: true
        }
    };

    await bot.sendMessage(chatId, message, { 
        parse_mode: "Markdown",
        ...keyboard
    });
});


bot.onText(/–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é/, async (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from?.first_name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';

    bot.sendMessage(chatId, `–ü—Ä–∏–≤—ñ—Ç, ${firstName}!`);

    const user = await findUserByChatId(chatId);

    user || createNewUserByChatId(chatId, firstName);    

    const message = 
        "üí° *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!* \n\n" +
        "–í —Ü—å–æ–º—É –±–æ—Ç—ñ –í–∏ –º–æ–∂–µ—Ç–µ:\n" +
        "‚úÖ –ü–æ–¥–∞—Ç–∏ *–ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞* üìä\n" +
        "‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ *–∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –ø—Ä–æ –æ–ø–ª–∞—Ç—É* üí≥\n" +
        "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ *—Å–≤—ñ–π –±–∞–ª–∞–Ω—Å* üí∞\n\n" +
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ ‚¨áÔ∏è";

    const keyboard = {
        reply_markup: {
            keyboard: [
                [{ text: "üìà –ü–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏" }, { text: "üí∞ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å" }]
            ],
            resize_keyboard: true
        }
    };

    await bot.sendMessage(chatId, message, { 
        parse_mode: "Markdown",
        ...keyboard
    });
        
});

bot.onText(/üìà –ü–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏/, async (msg) => {
    const chatId = msg.chat.id;
    
    const message = 
        "üìù *–í–Ω–µ—Å—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞* \n\n" +
        "üîπ –î–ª—è *–æ–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ* –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
        "`–•–•–•–•`\n\n" +
        "üîπ –î–ª—è *–¥–≤–æ—Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ* –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
        "`–•–•–•–• YYYY, –¥–µ XXXX - –ø–æ–∫–∞–∑–Ω–∏–∫ –∑–∞ –¥–µ–Ω—å, –∞ YYYY - –ø–æ–∫–∞–∑–Ω–∏–∫ –∑–∞ –Ω—ñ—á`\n\n" +
        "üìå –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `1234` –∞–±–æ `1234 0078`";

        await bot.sendMessage(chatId, message, {
            parse_mode: "Markdown",
            reply_markup: {
                keyboard: [
                    [{ text: "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" }]
                ],
                resize_keyboard: true
            }
        });
        
});



// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –∞–¥–º—ñ–Ω—É
const sendAdminReport = async () => {
    const users = await findAllUser();
    const debtors = users.filter(user => user.balance > 0);
    if (debtors.length > 0) {
        const report = debtors.map(user => `${user.name}: ${user.balance} –≥—Ä–Ω`).join('\n');
        bot.sendMessage(adminChatId, `–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –±–æ—Ä–≥–æ–º:\n${report}`);
    } else {
        bot.sendMessage(adminChatId, `–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –±–æ—Ä–≥–æ–º.`);
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–¥–∞—á—É –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
const remindUsersToSubmitReadings = async () => {

    const users = await findAllUser();
    
    users.forEach(user => {
        const message = `üîî –®–∞–Ω–æ–≤–Ω–∏–π(–∞) ${user.name}, –Ω–∞–≥–∞–¥—É—î–º–æ, —â–æ –∑ 28-–≥–æ –ø–æ 31-—à–µ —á–∏—Å–ª–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –µ–ª–µ–∫—Ç—Ä–æ–ª—ñ—á–∏–ª—å–Ω–∏–∫–∞.`;
        bot.sendMessage(user.chatId, message);
    });
};


bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text?.trim();

    if (!text) return;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É: 1234 –∞–±–æ 1234 5678
    const singleRateRegex = /^\d{4}$/;
    const doubleRateRegex = /^\d{4} \d{4}$/;

    if (singleRateRegex.test(text)) {
        await updateUserByChatId(chatId, {day: text})
        bot.sendMessage(chatId, `‚úÖ –û–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫: ${text} –∑–∞–ø–∏—Å–∞–Ω–æ.`, {
            reply_markup: {
                keyboard: [
                    [{ text: "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" }]
                ],
                resize_keyboard: true
            }
        });
    } else if (doubleRateRegex.test(text)) {
        const [dayRate, nightRate] = text.split(' ');
        await updateUserByChatId(chatId, {day: dayRate, night: nightRate})
        bot.sendMessage(chatId, `‚úÖ –î–≤–æ—Ç–∞—Ä–∏—Ñ–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫: –î–µ–Ω—å ${dayRate}, –ù—ñ—á ${nightRate} –∑–∞–ø–∏—Å–∞–Ω–æ.`, {
            reply_markup: {
                keyboard: [
                    [{ text: "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" }]
                ],
                resize_keyboard: true
            }
        });       
        
           
    } 
});

bot.onText(/üí∞ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å/, async (msg) => {
    const chatId = msg.chat.id;

    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏
    const user = await findUserByChatId(chatId);

    if (!user) {
        return bot.sendMessage(chatId, "‚ùå –î–∞–Ω—ñ –ø—Ä–æ –≤–∞—à –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
    }

    const { dayDifference, nightDifference, balance, night } = user;

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
    let message;
    if (!night || night === 0) {
        message = `üîπ –û–¥–Ω–æ–∑–æ–Ω–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫\n‚ö° –°–ø–æ–∂–∏—Ç–æ: ${dayDifference} –∫–í—Ç\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance} –≥—Ä–Ω`;
    } else {
        message = `üîπ –î–≤–æ–∑–æ–Ω–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫\nüåû –î–µ–Ω—å: ${dayDifference} –∫–í—Ç\nüåô –ù—ñ—á: ${nightDifference} –∫–í—Ç\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance} –≥—Ä–Ω`;
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    bot.sendMessage(chatId, message, {
        reply_markup: {
            keyboard: [
                [{ text: "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" }]
            ],
            resize_keyboard: true
        }
    });
});





// –†–æ–∑–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–æ—Ä–≥—ñ–≤ (—â–æ–¥–Ω—è –æ 12:00 –∑ 1-–≥–æ –ø–æ 5-—Ç–µ —á–∏—Å–ª–æ)
schedule.scheduleJob('0 12 1-5 * *', notifyUsers);

// –†–æ–∑–∫–ª–∞–¥ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –∞–¥–º—ñ–Ω—É (6-–≥–æ —á–∏—Å–ª–∞ –æ 12:00)
schedule.scheduleJob('0 12 6 * *', sendAdminReport);

// –†–æ–∑–∫–ª–∞–¥ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–¥–∞—á—É –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ (25-–≥–æ —á–∏—Å–ª–∞ –æ 12:00)
schedule.scheduleJob('0 12 25 * *', remindUsersToSubmitReadings);
